# Testing configurations:
#   - MSVC: 2017 and 2015
#   - MinGW: 6.3.0 and 7.3.0
# Both are compiling Debug and Release builds
# Architecture is x64 only (for now)

environment:
  matrix:
    - COMPILER: MSVC
      ARCH: x64

    - COMPILER: MinGW
      ARCH: x64
      MINGW_BIN: 'C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1\mingw64\bin'

    - COMPILER: MinGW
      ARCH: x64
      MINGW_BIN: 'C:\mingw-w64\x86_64-7.3.0-posix-seh-rt_v5-rev0\mingw64\bin'

configuration:
  - Debug
  - Release

image:
  - Visual Studio 2015
  - Visual Studio 2017

matrix:
  exclude:
    # The Visual Studio 2017 image has an outdated version of MinGW
    - image: Visual Studio 2017
      COMPILER: MinGW

# Add the MinGW compiler to PATH
init:
  - cmd: git config --global core.autocrlf input
  - cmd: if [%COMPILER%]==[MinGW] SET PATH=%MINGW_BIN%;%PATH%

# Install dependencies using my custom cmake targets
before_build:
  - cmd: mkdir build
  - cmd: cd build
  - cmd: if [%COMPILER%]==[MSVC] cmake .. -A%ARCH% -DINSTALL_WIN_DEPS=ON -DDISABLE_ATTRIBUTES=ON
  - cmd: if [%COMPILER%]==[MinGW] cmake .. -G "MinGW Makefiles" -DINSTALL_WIN_DEPS=ON -DCMAKE_IGNORE_PATH="C:/Program Files/Git/usr/bin;C:/MinGW/bin" -DCMAKE_BUILD_TYPE=%configuration%
  - cmd: cmake --build .
  - cmd: if [%COMPILER%]==[MSVC] cmake .. -A%ARCH% -DINSTALL_WIN_DEPS=OFF
  - cmd: if [%COMPILER%]==[MinGW] cmake .. -G "MinGW Makefiles" -DINSTALL_WIN_DEPS=OFF

# Include the config option since Visual Studio stores multiple configs
build_script:
  - cmd: cmake --build . --config %configuration%

# Add DLLs to PATH so they're available for running tests
after_build:
  - cmd: SET PATH=%PATH%;../deps/install-MSVC/;../deps/install-mingw

test_script:
  - cmd: ctest .

skip_commits:
  message: /^\[skip appveyor\]/
